pipeline {
	agent {
        node{
        label 'maven-server'
        }
    }
    
    tools {
        maven 'mvn'
    }
    
    stages {
        stage('Git Clone') {
            steps {
                git credentialsId: 'github-jenkins', url: "${Repo}"

            }
        }
        stage ('Build'){
            steps{
                script{
					def pom = readMavenPom file: 'pom.xml'
                    def version = pom.version
                    def majorVersion = version.tokenize('.')[0]
                    def minorVersion = version.tokenize('.')[1]
                    def patchVersion = version.tokenize('.')[2].replace('-SNAPSHOT','')
                    BUILD_VERSION = "module-a-${majorVersion}.${minorVersion}.${patchVersion}-${GIT_COMMIT[0..6]}-${BUILD_NUMBER}"
                    echo "Major version: ${majorVersion}"
                    echo "Minor version: ${minorVersion}"
                    echo "patchVersion: ${patchVersion}"
                    echo "Build Number: ${BUILD_NUMBER}"
                    echo "Build Version: ${BUILD_VERSION}"
                    sh "mvn clean install"
                }
            }
        }
		stage('Sonar'){
            steps{
                script {
                 withSonarQubeEnv(credentialsId: 'sonarqube') {
                 sh 'mvn sonar:sonar -Dsonar.projectName=test -Dsonar.projectKey=test'
                }
                }
            }
        }
		stage('Uploading to JFrog Artifactory') {
			steps{
			rtUpload(
			serverId:"jfrog",
			spec: '''{
			"files":[{
			"pattern": "module-a/target/*.jar",
			"target": "jfrog-repository"
			}]
			}
			''',
			)
			}
		}
		stage('Archieving the Artifact'){
		steps{
		archiveArtifacts artifacts: 'module-a/target/*.jar', followSymlinks: false
		}
		}
    }
}
