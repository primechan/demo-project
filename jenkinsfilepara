pipeline {
    agent {
        node {
            label 'maven-server'
        }
    }

    tools {
        maven 'mvn'
    }

    stages {
        stage('Git Clone') {
            steps {
                git credentialsId: 'github-jenkins', url: "${Repo}"
            }
        }

        stage('Build') {
            steps {
                script {
                    def pom = readMavenPom file: 'pom.xml'
                    def version = pom.version
                    def majorVersion = version.tokenize('.')[0] 
                    def minorVersion = version.tokenize('.')[1].replace('-SNAPSHOT','') 
                    BUILD_VERSION = "module-a-${majorVersion}.${minorVersion}-${GIT_COMMIT[0..6]}-${BUILD_NUMBER}"
                    echo "Major version: ${majorVersion}" 
                    echo "Minor version: ${minorVersion}"
                    echo "Build Number: ${BUILD_NUMBER}"
                    echo "Build Version: ${BUILD_VERSION}"
                    echo 'Building the project...'
                    sh 'mvn clean'
                    sh "mvn versions:set -DnewVersion=${BUILD_VERSION}"
                    sh 'mvn install'
                    
                    jacoco()
                }
            }
        }

        stage('Sonar') {
            steps {
                script {
                    withSonarQubeEnv(credentialsId: 'sonarqube') {
                        sh 'mvn sonar:sonar -Dsonar.projectName=test -Dsonar.projectKey=test'
                    }
                }
            }
            post {
                always {
                    script {
                        def qualityGatePassed = false
                        timeout(time: 1, unit: 'HOURS') {
                            waitForQualityGate()
                                .failBuildOnQGFailure(true)
                                .errorOnQGWarning(true)
                                .handleTimeout(true)
                                .script {
                                    def qg = waitForQualityGate()
                                    qualityGatePassed = qg.status == 'OK'
                                    echo "Quality Gate status: ${qg.status}"
                                    
                                    // Check if custom quality gate was used
                                    def customQualityGate = qg.conditions.find { it.metricKey == 'PrimeSquare UI Quality Gate' }
                                    if (customQualityGate && customQualityGate.status == 'OK') {
                                        echo "Custom Quality Gate (PrimeSquare UI Quality Gate) Passed"
                                    } else {
                                        echo "Default Quality Gate (Sonar Way) Passed"
                                    }
                                }
                        }

                        // Perform additional custom quality gate checks
                        if (qualityGatePassed) {
                            // Add your custom quality gate logic here
                            // You can perform additional checks or criteria
                            // based on your specific requirements
                            // For example:
                            if (someCustomCheck) {
                                error("Custom quality gate check failed.")
                            }
                        } else {
                            error("Quality Gate check failed.")
                        }
                    }
                }
            }
        }

        stage('Uploading to JFrog Artifactory') {
            steps {
                script {
                    rtUpload(
                        serverId: "jfrog",
                        spec: '''{
                            "files":[{
                                "pattern": "module-a/target/*.jar",
                                "target": "jfrog-repository"
                            }]
                        }'''
                    )
                }
            }
        }

        stage('Archiving the Artifact') {
            steps {
                script {
                    archiveArtifacts artifacts: "module-a/target/*.jar", followSymlinks: false
                }
            }
        }
    }
}
